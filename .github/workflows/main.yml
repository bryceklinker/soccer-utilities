on: [push]
env:
  REST_API_OUTPUT_DIRECTORY: ${{ github.workspace }}/dist/apps/rest-api
  REST_API_ARCHIVE_PATH: ${{ github.workspace }}/dist/apps/rest-api.zip
  TERRAFORM_VERSION: 1.0.1
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
  CYPRESS_AUTH0_CLIENT_ID: ${{ secrets.CYPRESS_AUTH0_CLIENT_ID }}
  CYPRESS_AUTH0_CLIENT_SECRET: ${{ secrets.CYPRESS_AUTH0_CLIENT_SECRET }}
  CYPRESS_AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
  CYPRESS_AUTH0_USERNAME: ${{ secrets.CYPRESS_AUTH0_USERNAME }}
  CYPRESS_AUTH0_PASSWORD: ${{ secrets.CYPRESS_AUTH0_PASSWORD }}
  CYPRESS_AUTH0_AUDIENCE: ${{ secrets.CYPRESS_AUTH0_AUDIENCE }}
jobs:
  verify:
    name: Verify
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - uses: actions/setup-node@v2
        name: Setup Node
        with:
          node-version: '16'

      - run: yarn install
        name: Install Dependencies

      - run: yarn test
        name: Run Unit Tests

      - run: |
          git remote set-url --push origin "https://${GITHUB_USER_NAME}:${GITHUB_TOKEN}@github.com/bryceklinker/soccer-utilities"
          git config --global user.email "automation@github.com"
          git config --global user.name "automation"
          yarn bump:version -- --version=patch
        name: Bump Version

      - run: yarn build
        name: Build Applications

      - run: |
          pushd "${REST_API_OUTPUT_DIRECTORY}" || exit 1
          yarn install --production
          popd || exit 1
        name: Install Function App Packages

      - run: |
          pushd "${REST_API_OUTPUT_DIRECTORY}" || exit 1
          zip -qq -rm "${REST_API_ARCHIVE_PATH}" -- *
          popd || exit 1
        name: Create Function App Archive

      - run: git push origin main --tags
        name: Push Version to Repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER_NAME: ${{ github.actor }}

      - uses: actions/upload-artifact@v2
        with:
          name: rest-api
          path: |
            dist/apps/rest-api.zip

      - uses: actions/upload-artifact@v2
        with:
          name: web-ui
          path: |
            dist/apps/web-ui/**/*.*

  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    needs: [verify]
    environment: prod
    env:
      TARGET_ENVIRONMENT: prod
      TARGET_ENVIRONMENT_DIRECTORY: ${{ github.workspace }}/apps/infrastructure/environments/prod
      TARGET_ENVIRONMENT_PLAN_PATH: ${{ github.workspace }}/apps/infrastructure/environments/prod.tfplan
    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - uses: actions/setup-node@v2
        name: Setup Node
        with:
          node-version: '14'

      - uses: actions/download-artifact@v2
        id: rest-api
        with:
          name: rest-api

      - uses: actions/download-artifact@v2
        with:
          name: web-ui
          path: dist/apps/web-ui

      - run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform="${TERRAFORM_VERSION}"
        name: Install Terraform

      - run: |
          mkdir -p "${REST_API_OUTPUT_DIRECTORY}"
          unzip -qq "${{ github.workspace }}/rest-api.zip" -d "${REST_API_OUTPUT_DIRECTORY}"
        name: Extract Rest Api

      - run: yarn install
        name: Install Npm Packages

      - run: |
          pushd "${TARGET_ENVIRONMENT_DIRECTORY}" || exit 1
          terraform init
          popd || exit 1
        name: Initialize Terraform

      - run: |
          pushd "${TARGET_ENVIRONMENT_DIRECTORY}" || exit 1
          terraform plan -var="auth0_domain=${AUTH0_DOMAIN}" \
            -var="auth0_client_id=${AUTH0_CLIENT_ID}" \
            -var="auth0_client_secret=${AUTH0_CLIENT_SECRET}" \
            -out "${TARGET_ENVIRONMENT_PLAN_PATH}"
          popd || exit 1
        name: Create Terraform Plan

      - run: |
          pushd "${TARGET_ENVIRONMENT_DIRECTORY}" || exit 1
          terraform apply "${TARGET_ENVIRONMENT_PLAN_PATH}"
          popd || exit 1
        name: Apply Terraform Plan

      - run: |
          pushd "${TARGET_ENVIRONMENT_DIRECTORY}" || exit 1
          curl "$(terraform output -raw function_app_url)/.health"
          curl "$(terraform output -raw function_app_url)/.health"
          curl "$(terraform output -raw function_app_url)/.health"
          popd || exit 1
        name: Warm Up Function App

      - run: |
          pushd "${TARGET_ENVIRONMENT_DIRECTORY}" || exit 1
          export CYPRESS_BASE_URL="$(terraform output -raw web_site_url)"
          export CYPRESS_API_URL="$(terraform output -raw function_app_url)"
          popd || exit 1

          yarn e2e
        name: Run End-To-End Tests

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress
          path: |
            dist/cypress/apps/web-ui-e2e/screenshots/**/*.*
            dist/cypress/apps/web-ui-e2e/videos/**/*.*
